#include <stdlib.h>
#include <stdio.h>
#include <math.h>
typedef struct Xy
{
    float x, y;
} Xy;

int cmp_yx(const void *p1, const void *p2)
{
    const Xy *xy1 = p1, *xy2 = p2;
    int cmp;
    if ((cmp = (xy1->y > xy2->y) - (xy1->y < xy2->y)) != 0)
        return cmp;
    if ((cmp = (xy1->x > xy2->x) - (xy1->x < xy2->x)) != 0)
        return cmp;
    return 0;
}

int turn(const Xy *xy1, const Xy *xy2, const Xy *xy3)
{
    Xy v1 = { xy2->x - xy1->x, xy2->y - xy1->y }, v2 = { xy3->x - xy2->x, xy3->y - xy2->y };
    float area = (float) v1.x * v2.y - (float) v1.y * v2.x;
    return (area < 0) - (area > 0);
}

float traverse_clockwise ( const float coord[],int n) {
    Xy poly[50];
    int j1=0;
    for (int i1 = 0; i1<n*2; i1+=2){
        poly[j1].x = coord[i1];
        poly[j1].y = coord[i1+1];
        j1++;
    }
    qsort(poly, n, sizeof *poly, cmp_yx);
    Xy left_chain[50], right_chain[50];
    unsigned left_top = -1, right_top = -1;
    left_chain[++left_top] = poly[0];

    for (unsigned i = 1; i < n; ++i)
    {
        left_chain[++left_top] = poly[i];

        unsigned left_sub_top = left_top - 1;
        while (left_sub_top > 0 &&
               turn(&left_chain[left_sub_top - 1],
                    &left_chain[left_sub_top],
                    &left_chain[left_top]) < 0)
            --left_sub_top;

        ++left_sub_top;
        if (left_sub_top == left_top)
            continue;
        for (unsigned j = left_sub_top; j < left_top; ++j)
            right_chain[++right_top] = left_chain[j];

        left_chain[left_sub_top] = left_chain[left_top];
        left_top = left_sub_top;
    }

    float Per = 0;
    for (int i3 = 0; i3<n; i3++){
        Per += sqrtf(powf(poly[i3+1].x - poly[i3].x,2)-2 + powf(poly[i3+1].y - poly[i3].y,2));
    }

    return Per;
}
int main() {
   float rect[] = {1,5,7,1,7,5,1,1};
    float star[] = {3.97, 0.82, 2.26, 3.69, 5.39, 2.16, 2.03, 2.11, 5.36, 4.06};
    float enneagon[] ={76, 67.1, -8.3, 18, 55, 93.3, 77, 33, 21.3, 99, -20, 50, -8.3, 82, 55, 6.7,  21.3, 0.76};
    printf("rect=%f\n", traverse_clockwise (rect, 4));
    printf("star=%f\n", traverse_clockwise (star, 5));
    printf("enneagon=%f\n", traverse_clockwise (enneagon, 9));

    return 0;
}
